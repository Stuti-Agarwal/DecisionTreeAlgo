import numpy as np
import pandas as pd
df = np.asarray(pd.read_csv("banknote.txt", sep=","))
y = df[:, -1:]
print(y)


def featureEntropy(a):
    classes, class_counts = np.unique(df[a], return_counts=True)
    entropy_value = np.sum([(-class_counts[i]/np.sum(class_counts))*np.log2(class_counts[i]/np.sum(class_counts))
                            for i in range(len(classes))])
    return entropy_value


def infoGain(dataset, feature, label):
    dataset_entropy = featureEntropy(dataset[label])
    values, feat_counts = np.unique(dataset[feature], return_counts=True)

    wfe = np.sum([(feat_counts[i]/np.sum(feat_counts))*featureEntropy(dataset.where(dataset[feature]
                                                                                    == values[i]).dropna()[label]) for i in range(len(values))])
    fig = dataset_entropy - wfe
    return fig


def create_decision_tree(dataset, df, features, label, parent):
    datum = np.unique(df[label], return_counts=True)
    unique_data = np.unique(dataset[label])

    if len(unique_data) <= 1:
        return unique_data[0]
    elif len(dataset) == 0:
        return unique_data[np.argmax(datum[1])]
    elif len(features) == 0:
        return parent
    else:
        parent = unique_data[np.argmax(datum[1])]
        item_values = [infoGain(dataset, feature, label)
                       for feature in features]
        optimum_feature_index = np.argmax(item_values)
        optimum_feature = features[optimum_feature_index]
        decision_tree = {optimum_feature: {}}
        features = [i for i in features if i != optimum_feature]
        for value in np.unique(dataset[optimum_feature]):
            min_data = dataset.where(
                dataset[optimum_feature] == value).dropna()
            min_tree = create_decision_tree(
                min_data, df, features, label, parent)
            decision_tree[optimum_feature][value] = min_tree
        return(decision_tree)


def predict(test, tree):
    for nodes in tree.keys():
        value = test[nodes]
        tree = tree[nodes][value]

        prediction = 0
        if type(tree) is dict:
            prediction = predict(test, tree)
        else:
            prediction = tree
            break
    return prediction
